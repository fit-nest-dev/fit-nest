import React, { useState, useEffect } from 'react';
import axios from 'axios';

/**
 * A component to manage events, allowing users to view, add, edit, and remove events.
 *
 * The component fetches a list of events from the backend on mount and displays them.
 * Users can modify existing events or add new ones using the provided input fields.
 * Changes to events can be saved to the backend.
 *
 * @returns {JSX.Element} A JSX element that renders the events management interface.
 */
const ManageEvents = () => {
  const [events, setEvents] = useState([]);
  const [newEvent, setNewEvent] = useState({
    title: '',
    description: '',
    imageLink: '',
    date: '',
  });

  useEffect(() => {
    /**
     * Fetches a list of events from the backend and updates the component state with the result.
     *
     * If the request is successful, the response data is used to update the `events` state.
     * If the request fails, an error is logged to the console.
     */
    const fetchEvents = async () => {
      try {
        const response = await axios.get('http://localhost:5000/api/Admin/get-events', { withCredentials: true }); // Update with your backend route
        setEvents(response.data || []);
      } catch (error) {
        console.error('Error fetching events:', error);
      }
    };

    fetchEvents();
  }, []);

  /**
   * Updates an event in the component state at the given index with the provided key and value.
   *
   * @param {number} index - The index of the event to update.
   * @param {string} key - The key of the event property to update.
   * @param {any} value - The new value for the event property.
   */
  const handleEventChange = (index, key, value) => {
    const updatedEvents = [...events];
    updatedEvents[index][key] = value;
    setEvents(updatedEvents);
  };

  /**
   * Adds a new event to the component state with the values from the `newEvent` state.
   *
   * If any of the required fields are missing, an alert is shown to the user and the
   * function returns without updating the state.
   *
   * Otherwise, a new event is added to the end of the `events` array with the provided
   * values and a unique `id` generated by `Date.now()`. The `newEvent` state is then
   * reset to an empty object.
   */
  const handleAddEvent = () => {
    if (!newEvent.title || !newEvent.description || !newEvent.imageLink || !newEvent.date) {
      alert('All fields are required for a new Event.');
      return;
    }
    setEvents([...events, { ...newEvent, id: Date.now() }]);
    setNewEvent({ title: '', description: '', imageLink: '', date: '' });
  };

  /**
   * Removes an event from the component state at the given index.
   *
   * @param {number} index - The index of the event to remove.
   */
  const handleRemoveEvent = (index) => {
    const updatedEvents = events.filter((_, i) => i !== index);
    setEvents(updatedEvents);
  };

  /**
   * Saves the events in the component state to the backend.
   *
   * If the request is successful, an alert is shown to the user with a success message.
   * If the request fails, an error is logged to the console.
   */
  const saveEvents = async () => {
    try {
      await axios.post('http://localhost:5000/api/Admin/save-events', { events }, { withCredentials: true });
      alert('Events updated successfully!');
    } catch (error) {
      console.error('Error saving events:', error);
    }
  };

  return (
    <div className="p-6">
      <h1 className="text-2xl font-bold mb-4">Best Transformation</h1>

      <div className="space-y-4">
        {events?.map((event, index) => (
          <div key={event.id} className="p-4 border rounded shadow">
            <div className="mb-2">
              <label className="block text-sm font-semibold">Name:</label>
              <input
                type="text"
                value={event?.title}
                onChange={(e) => handleEventChange(index, 'title', e.target.value)}
                className="w-full p-2 border rounded text-black bg-white"
              />
            </div>
            <div className="mb-2">
              <label className="block text-sm font-semibold">Description:</label>
              <input
                type="text"
                value={event?.description}
                onChange={(e) => handleEventChange(index, 'description', e.target.value)}
                className="w-full p-2 border rounded text-black bg-white"
              />
            </div>
            <div className="mb-2">
              <label className="block text-sm font-semibold">Image:</label>
              <input
                type="text"
                value={event?.imageLink}
                onChange={(e) => handleEventChange(index, 'imageLink', e.target.value)}
                className="w-full p-2 border rounded text-black bg-white"
              />
            </div>
            <div className="mb-2">
              <label className="block text-sm font-semibold">Duration:</label>
              <input
                type="text"
                value={event?.date}
                onChange={(e) => handleEventChange(index, 'date', e.target.value)}
                className="w-full p-2 border rounded text-black bg-white"
              />
            </div>
            <button
              onClick={() => handleRemoveEvent(index)}
              className="bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600"
            >
              Remove
            </button>
          </div>
        ))}
      </div>

      <div className="p-4 mt-6 border rounded shadow">
        <h2 className="text-lg font-bold mb-2">Add New</h2>
        <div className="mb-2">
          <label className="block text-sm font-semibold">Name:</label>
          <input
            type="text"
            value={newEvent.title}
            onChange={(e) => setNewEvent({ ...newEvent, title: e.target.value })}
            className="w-full p-2 border rounded text-black bg-white"
          />
        </div>
        <div className="mb-2">
          <label className="block text-sm font-semibold">Description:</label>
          <input
            type="text"
            value={newEvent.description}
            onChange={(e) => setNewEvent({ ...newEvent, description: e.target.value })}
            className="w-full p-2 border rounded text-black bg-white"
          />
        </div>
        <div className="mb-2">
          <label className="block text-sm font-semibold">Image: </label>
          <input
            type="text"
            value={newEvent.imageLink}
            onChange={(e) => setNewEvent({ ...newEvent, imageLink: e.target.value })}
            className="w-full p-2 border rounded text-black bg-white"
          />
        </div>
        <div className="mb-2">
          <label className="block text-sm font-semibold">Duration:</label>
          <input
            type="text"
            value={newEvent.date}
            onChange={(e) => setNewEvent({ ...newEvent, date: e.target.value })}
            className="w-full p-2 border rounded text-black bg-white"
          />
        </div>
        <button
          onClick={handleAddEvent}
          className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
        >
          Add Event
        </button>
      </div>

      <button
        onClick={saveEvents}
        className="mt-6 bg-green-500 text-white px-6 py-3 rounded hover:bg-green-600"
      >
        Save Events
      </button>
    </div>
  );
};

export default ManageEvents;
